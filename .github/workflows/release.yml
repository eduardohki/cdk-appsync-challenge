# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
      tag_exists: ${{ steps.check_tag_exists.outputs.exists }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "7"
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check if version has already been tagged
        id: check_tag_exists
        run: |-
          TAG=$(cat dist/releasetag.txt)
          ([ ! -z "$TAG" ] && git ls-remote -q --exit-code --tags origin $TAG && (echo "exists=true" >> $GITHUB_OUTPUT)) || (echo "exists=false" >> $GITHUB_OUTPUT)
          cat $GITHUB_OUTPUT
      - name: Check for new commits
        id: git_remote
        run: |-
          echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v4.3.6
        with:
          name: build-artifact
          path: dist
          overwrite: true
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.sha }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: ${{ matrix.environment }}
    concurrency: ${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "7"
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: Configure AWS Credentials
        if: ${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: ${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: ${{ secrets[matrix.secretAccessKeySecretName] }}
          region: ${{ matrix.region }}
        run: |-
          echo "AWS_ACCESS_KEY_ID=$accessKeyId" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$secretAccessKey" >> $GITHUB_ENV
          echo "AWS_REGION=$region" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: ${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: ${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: ${{ matrix.roleToAssume }}
          aws-region: ${{ matrix.region }}
          role-duration-seconds: ${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: ${{ matrix.hasPreDeployTask == 'true' }}
        run: pnpm ${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: pnpm deploy:workflow
      - name: Post Deployment
        if: ${{ matrix.hasPostDeployTask == 'true' }}
        run: pnpm ${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include: []
        environment: []
